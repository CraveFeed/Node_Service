datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "prisma-client-js"
}

enum UserType {
  REGULAR
  BUSINESS
}

enum Currency {
  USD // United States Dollar
  EUR // Euro
  GBP // British Pound Sterling
  JPY // Japanese Yen
  INR // Indian Rupee
  AUD // Australian Dollar
  CAD // Canadian Dollar
  CHF // Swiss Franc
  CNY // Chinese Yuan
  SEK // Swedish Krona
  NZD // New Zealand Dollar
  MXN // Mexican Peso
  SGD // Singapore Dollar
  HKD // Hong Kong Dollar
  NOK // Norwegian Krone
  KRW // South Korean Won
  TRY // Turkish Lira
  RUB // Russian Ruble
  ZAR // South African Rand
  BRL // Brazilian Real
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  username           String              @unique
  password           String
  bio                String?
  avatar             String?
  firstName          String
  lastName           String
  Latitude           String?
  Longitude          String?
  banner             String?
  mobileVerified     Boolean             @default(false)
  mobileNo           String?
  CountryCode        String?
  Spiciness          Int
  Sweetness          Int
  Dish               String
  Sourness           Int
  Type               UserType
  posts              Post[]
  likes              Like[]
  comments           Comment[]
  followers          Follows[]           @relation("FollowersRelation")
  following          Follows[]           @relation("FollowingRelation")
  Notification       Notification[]
  messages           Message[]           @relation("SentMessages")
  receivedMessages   Message[]           @relation("ReceivedMessages")
  ChefCorner         ChefCorner[]
  NotificationUpdate NotificationUpdate?

  Restaurant Restaurant?

  @@index([username, Type])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String?
  receiverId String?
  createdAt  DateTime @default(now())
  sender     User?    @relation("SentMessages", fields: [senderId], references: [id], onDelete: SetNull)
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: SetNull)
}

model ChefCorner {
  id          String    @id @default(cuid())
  title       String
  description String
  video       String
  thumbnail   String
  createdAt   DateTime  @default(now())
  viewsCount  Int
  hashTags    HashTag[]
  likes       Like[]
  comments    Comment[]
  userId      String
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id        String   @id @default(cuid())
  address   String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude  String
  longitude String
  events    Event[]
  menus     Menu[]
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional relationship with posts where a restaurant might be tagged
  posts Post[] // Posts that tagged the restaurant
}

model Event {
  id           String     @id @default(cuid())
  name         String // Name of the event (e.g., "Happy Hour", "Live Music Night")
  description  String // Description of the event
  startDate    DateTime // Start date of the event
  endDate      DateTime // End date of the event
  location     String // Event location (restaurant address)
  restaurantId String // Link to restaurat
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Menu {
  id           String     @id @default(cuid())
  name         String
  description  String
  price        Float
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Post {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  title          String
  description    String
  longitude      String
  latitude       String
  Cuisine        String
  Dish           String
  isBusinessPost Boolean
  pictures       String[]
  userId         String
  city           String?
  impressions    Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes          Like[]
  comments       Comment[]
  hashTags       HashTag[]
  originalPost   Post?     @relation("RepostRelation", fields: [originalPostId], references: [id], onDelete: Cascade)
  originalPostId String? // For reposts
  repostedPosts  Post[]    @relation("RepostRelation")

  // Optional relationship with Restaurant (if a regular user tags a restaurant in their post)
  restaurantId String? // Foreign key to the Restaurant
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}

model Comment {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  content    String
  postId     String?
  post       Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  videoId    String?
  chefcorner ChefCorner? @relation(fields: [videoId], references: [id], onDelete: Cascade)
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id         String     @id @default(cuid())
  postId     String
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  videoId    String
  chefcorner ChefCorner @relation(fields: [videoId], references: [id], onDelete: Cascade)
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HashTag {
  id           String     @id @default(cuid())
  postId       String
  chefcornerId String
  word         String     @unique
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  chefCorner   ChefCorner @relation(fields: [chefcornerId], references: [id], onDelete: Cascade)

  @@index([word])
}

model TrendingHashtag {
  id       String   @id @default(cuid())
  word     String   @unique
  count    Int
  lastUsed DateTime
}

model Follows {
  id          String @id @default(cuid())
  followerId  String
  follower    User   @relation("FollowersRelation", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)
}

model NotificationUpdate {
  id       String   @id @default(cuid())
  User     User     @relation(fields: [userId], references: [id])
  dateTime DateTime @default(now())
  count    Int
  userId   String   @unique
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  avatar    String?
  message   String
  creatorId String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
